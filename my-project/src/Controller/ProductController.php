<?php
/**
 * V13A - przygotowanie entity product
 *
 * @category   Virtua
 * @package    Virtua_Module
 * @copyright  Copyright (c) Virtua
 * @author     Dawid Kruczek
 */
namespace App\Controller;

use App\Entity\ImageProduct;
use App\Entity\Product;
use App\Form\ProductType;
use App\Repository\ProductRepository;
use function PHPSTORM_META\type;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\File\File;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\Validator\Constraints\DateTime;

/**
 * @Route("/product")
 */
class ProductController extends Controller
{
    /**
     * @Route("/", name="product_index", methods="GET")
     */
    public function index(ProductRepository $productRepository): Response
    {
        return $this->render('product/index.html.twig', ['products' => $productRepository->findAll()]);
    }

    /**
     * @Route("/new", name="product_new", methods="GET|POST")
     */
    public function new(Request $request): Response
    {
        $product = new Product();
        $date = new \DateTime();
        $date->format("Y:M:D");
        $product->setCreatedDate($date);
        $product->setModifiedDate($date);
        $form = $this->createForm(ProductType::class, $product);
        $form->handleRequest($request);


        if ($form->isSubmitted() && $form->isValid()) {
            $file=$form->get('picture')->getData();
            $imagepath=$this->generateUniqueFileName().'.'.$file->guessExtension();
            $file->move($this->getParameter('picture_directory'), $imagepath);
            $product->setPicture($imagepath);
            $em = $this->getDoctrine()->getManager();
            $em->persist($product);
            $em->flush();
            $this->addFlash(
                'notice',
                'Dodano nowy element'
            );
            return $this->redirectToRoute('product_index');
        }
        else if($form->isSubmitted() && !$form->isValid())
        {
            $this->addFlash(
                'error',
                'Blad dodania'
            );
        }

        return $this->render('product/new.html.twig', [
            'product' => $product,
            'form' => $form->createView()
        ]);
    }

    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }
    /**
     * @Route("/{id}", name="product_show", methods="GET")
     */
    public function show(Product $product): Response
    {
        return $this->render('product/show.html.twig', ['product' => $product]);
    }

    /**
     * @Route("/{id}/edit", name="product_edit", methods="GET|POST")
     */
    public function edit(Request $request, Product $product): Response
    {
        $date = new \DateTime();
        $date->format("Y:M:D");
        $product->setModifiedDate($date);
        $form = $this->createForm(ProductType::class, $product);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {


            $file=$form->get('picture')->getData();
            $fileName=$this->generateUniqueFileName().'.'.$file->guessExtension();
            $file->move($this->getParameter('picture_directory'), $fileName);
            $product->setPicture($fileName);
            $this->getDoctrine()->getManager()->flush();
            $this->addFlash(
                'notice',
                'Edytowano element poprawnie'
            );

            return $this->redirectToRoute('product_show', ['id' => $product->getId()]);
        }
        else if($form->isSubmitted() && !$form->isValid())
        {
            $this->addFlash(
                'error',
                'Blad dodania'
            );
        }
        return $this->render('product/edit.html.twig', [
            'product' => $product,
            'form' => $form->createView(),
        ]);
    }

    /**
     * @Route("/{id}", name="product_delete", methods="DELETE")
     */
    public function delete(Request $request, Product $product): Response
    {
        if ($this->isCsrfTokenValid('delete'.$product->getId(), $request->request->get('_token'))) {
            $em = $this->getDoctrine()->getManager();
            $em->remove($product);
            $em->flush();
            $this->addFlash(
                'notice',
                'Usunieto poprawnie!'
            );
        }
        else
        {
            $this->addFlash(
                'error',
                'Blad dodania'
            );
        }

        return $this->redirectToRoute('product_index');
    }
}
